import tensorflow as tf
import numpy as np

from chambers.losses import metric_learning

z1 = np.array([[-0.30316883, 0.18789046, -0.16587222, -0.0382605, 0.13781047,
                0.00765222, 0.421296, -0.06059095, 0.52452207, 0.01200005,
                0.18396404, 0.00969151, -0.03722588, -0.12804885, 0.03723421,
                -0.19704865, 0.238605, 0.43218637, 0.01831949, 0.17983985],
               [-0.07817132, 0.23547123, 0.10218902, -0.20159936, 0.07099021,
                0.03315214, 0.42721793, -0.03862314, 0.5470074, -0.15331244,
                0.06428643, -0.10677686, -0.11148857, -0.26708415, 0.0548258,
                -0.12658171, 0.15546222, 0.41404754, 0.13751547, 0.204082],
               [-0.21216294, 0.21070513, -0.00750829, -0.1403199, 0.09043539,
                -0.03034462, 0.37338674, -0.01842245, 0.5526511, -0.13265605,
                0.02290095, 0.05258589, -0.05046802, -0.00457622, -0.0481605,
                -0.23445225, 0.2588337, 0.50337374, -0.06950097, 0.1749614],
               [-0.26509422, 0.26716715, -0.06037111, -0.05282918, 0.14194934,
                0.04799877, 0.44353858, 0.00648142, 0.5678626, -0.13173702,
                0.06406961, 0.01976437, -0.09885849, -0.23940694, 0.04593554,
                -0.19916967, 0.12377577, 0.39480153, -0.02903829, 0.08643975],
               [-0.17414442, 0.19045937, -0.13435775, -0.02217109, 0.06878609,
                -0.00467627, 0.4772993, -0.04117078, 0.53894395, -0.18575354,
                0.12672745, 0.04920564, -0.12796135, -0.2643997, 0.21486372,
                -0.18327801, 0.16018303, 0.3769443, 0.05776663, 0.00501045]])
y1 = np.array([2, 0, 7, 8, 9])

z2 = np.array([[-0.2527297, 0.25464404, 0.11946937, -0.15077981, 0.14067188,
                0.07661515, 0.30523026, -0.18253766, 0.542667, 0.03069577,
                0.15501188, 0.09647283, -0.01649232, -0.2376081, 0.01220181,
                -0.32292017, 0.0858966, 0.36645448, 0.13227105, 0.18179263],
               [-0.17106043, 0.16272941, -0.08193377, -0.10044539, 0.07187068,
                -0.04155407, 0.48762673, -0.10145754, 0.5580183, -0.17419282,
                -0.0233592, -0.01088511, -0.20527457, -0.22455761, 0.02175811,
                -0.12898616, 0.19008069, 0.39386156, 0.12352221, 0.11793116],
               [-0.17896299, 0.1537876, -0.0758745, -0.14276835, -0.02734815,
                0.15340866, 0.37687737, 0.02392768, 0.6494383, 0.1115361,
                -0.2312895, 0.02299053, -0.11281594, -0.08058915, -0.17225906,
                -0.06272489, 0.1616436, 0.27061355, 0.22046328, 0.24952501],
               [-0.08591206, 0.2305753, 0.02558014, -0.15539329, -0.17050312,
                0.04830888, 0.4804552, -0.03025416, 0.54470766, -0.13739252,
                -0.22229576, -0.05719288, -0.14039923, -0.16060841, -0.05940574,
                -0.1204927, 0.19841026, 0.3644611, 0.17700674, 0.12704754],
               [-0.22688946, 0.1934416, -0.05537806, -0.06414062, 0.04986703,
                -0.03057847, 0.3631536, -0.08036289, 0.6157421, -0.06328402,
                0.06575254, 0.06580695, -0.16138406, -0.08534358, 0.02159566,
                -0.14619811, 0.1566573, 0.5227091, -0.00330143, 0.13197517],
               [-0.20086034, 0.15597396, -0.11314793, -0.08241214, -0.01630099,
                0.07360057, 0.5138941, -0.21317764, 0.6663627, -0.06958145,
                -0.04624639, -0.18726268, -0.09619738, -0.0604122, 0.03464764,
                -0.12338777, 0.11744936, 0.2591499, -0.05445099, 0.03442377],
               [-0.23207937, 0.24003978, 0.00770365, -0.06328595, 0.11912011,
                0.03426467, 0.45457882, -0.07658198, 0.5280854, -0.12398627,
                0.1411554, 0.02307084, -0.12771186, -0.35085192, 0.08008039,
                -0.24979144, 0.0958079, 0.3491991, -0.0449776, 0.02287035],
               [-0.29982358, 0.20567006, -0.07682926, -0.04371316, 0.10909123,
                0.0469435, 0.47033766, 0.01708211, 0.5288986, -0.12298247,
                0.02464779, 0.02003919, -0.18071909, -0.32954913, 0.05827304,
                -0.18449889, 0.18892005, 0.32717273, -0.02924583, 0.07889805],
               [-0.13347356, 0.21824713, 0.03636166, -0.06212432, 0.06620409,
                -0.00512588, 0.44178152, -0.08363402, 0.51168174, -0.18773986,
                0.13563745, 0.12315688, -0.13117239, -0.25504157, 0.14253983,
                -0.27329507, 0.1609342, 0.4328764, 0.01637017, 0.03683542],
               [-0.18264681, 0.20163138, -0.01114395, -0.14165606, 0.05878957,
                0.08009017, 0.47879744, -0.07445668, 0.49434873, -0.2724756,
                0.14501752, -0.02433347, -0.09187058, -0.19875503, 0.11687951,
                -0.1451104, 0.24307981, 0.40031165, 0.1167413, 0.07252467]])
y2 = np.array([2, 2, 0, 0, 7, 7, 8, 8, 9, 9])

# loss = metric_learning.NTXentLoss(
#     temperature=0.07,
# )(y2, z2).numpy()

#%%
class TestMetricLearningLosses(tf.test.TestCase):
    def test_multi_similarity_loss(self):
        loss = metric_learning.MultiSimilarityLoss(
            pos_scale=2.0,
            neg_scale=40.0,
            threshold=0.5,
            ignore_diag=True,
            miner=None,
        )(y2, z2).numpy()
        self.assertAlmostEqual(loss, 0.6326, places=4)

    def test_contrastive_loss(self):
        loss = metric_learning.ContrastiveLoss(
            positive_margin=1.0,
            negative_margin=0.3,
            exponent=2,
            ignore_diag=True,
            miner=None,
        )(y2, z2).numpy()
        self.assertAlmostEqual(loss, 0.6518, places=4)

    def test_ntxent_loss(self):
        loss = metric_learning.NTXentLoss(
            temperature=0.07,
            # ignore_diag=True,
            # miner=None,
        )(y2, z2).numpy()
        self.assertAlmostEqual(loss, 1.8534, places=4)
